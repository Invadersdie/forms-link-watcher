const http = require('http');
const url = require('url');
const fs = require('fs');
const path = require('path');

// –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
const serverStartTime = Date.now();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è HTML —Ñ–∞–π–ª–æ–≤
function getHTMLContent() {
    const currentTime = Date.now();
    const elapsedSeconds = Math.floor((currentTime - serverStartTime) / 1000);
    
    // –ß–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º withlink.html, –∏–Ω–∞—á–µ withoutlink.html
    const htmlFile = elapsedSeconds >= 60 ? 'withlink.html' : 'withoutlink.html';
    
    try {
        const filePath = path.join(__dirname, htmlFile);
        const content = fs.readFileSync(filePath, 'utf8');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –≤ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const statusInfo = `
        <div style="position: fixed; top: 10px; right: 10px; background: rgba(0,0,0,0.8); color: white; padding: 10px; border-radius: 5px; font-size: 12px; z-index: 9999;">
            <strong>üîç –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä</strong><br>
            –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: ${elapsedSeconds} —Å–µ–∫<br>
            –§–∞–π–ª: ${htmlFile}<br>
            ${elapsedSeconds >= 60 ? '‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä–º—É –∞–∫—Ç–∏–≤–Ω–∞!' : '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ...'}
        </div>
        `;
        
        return content.replace('</body>', statusInfo + '</body>');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è HTML —Ñ–∞–π–ª–∞:', error);
        return '<h1>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</h1>';
    }
}

// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
const server = http.createServer((req, res) => {
    const parsedUrl = url.parse(req.url, true);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    
    if (req.method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
    }
    
    // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if (parsedUrl.pathname === '/' || parsedUrl.pathname === '/index.html') {
        res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
        res.end(getHTMLContent());
    }
    // API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    else if (parsedUrl.pathname === '/api/status') {
        const currentTime = Date.now();
        const elapsedSeconds = Math.floor((currentTime - serverStartTime) / 1000);
        const hasFormsLink = elapsedSeconds >= 60;
        
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
            serverStartTime: serverStartTime,
            currentTime: currentTime,
            elapsedSeconds: elapsedSeconds,
            hasFormsLink: hasFormsLink,
            currentFile: hasFormsLink ? 'withlink.html' : 'withoutlink.html'
        }));
    }
    // 404 –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    else {
        res.writeHead(404, { 'Content-Type': 'text/html; charset=utf-8' });
        res.end(`
            <h1>404 - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>
            <p>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:</p>
            <ul>
                <li><a href="/">–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</a></li>
                <li><a href="/api/status">API —Å—Ç–∞—Ç—É—Å–∞</a></li>
            </ul>
        `);
    }
});

const PORT = process.env.PORT || 3000;

server.listen(PORT, () => {
    console.log(`üöÄ –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
    console.log(`üìÑ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ HTML —Ñ–∞–π–ª—ã:`);
    console.log(`   - withoutlink.html (0-60 —Å–µ–∫)`);
    console.log(`   - withlink.html (–ø–æ—Å–ª–µ 60 —Å–µ–∫)`);
    console.log(`‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString()}`);
    console.log(`\n–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', () => {
    console.log('\nüëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('\nüëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
});
