const http = require('http');
const url = require('url');

// –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
const serverStartTime = Date.now();
const formsLink = 'https://forms.cloud.microsoft/Pages/ResponsePage.aspx?id=DQSIkWdsW0yxEjajBLZtrQAAAAAAAAAAAAMAAFbJEaBUQzJRUkZXRTVSVzJUUVpUUTBHMzRVWkVBNC4u';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function generateHTML() {
    const currentTime = Date.now();
    const elapsedSeconds = Math.floor((currentTime - serverStartTime) / 1000);
    const remainingSeconds = Math.max(0, 60 - elapsedSeconds);
    
    let content = `
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
            }
            .container {
                background: rgba(255, 255, 255, 0.1);
                padding: 30px;
                border-radius: 10px;
                backdrop-filter: blur(10px);
                text-align: center;
            }
            .timer {
                font-size: 24px;
                margin: 20px 0;
                padding: 20px;
                background: rgba(255, 255, 255, 0.2);
                border-radius: 10px;
            }
            .forms-link {
                font-size: 18px;
                margin: 20px 0;
                padding: 15px;
                background: rgba(76, 175, 80, 0.3);
                border-radius: 8px;
                border: 2px solid #4CAF50;
            }
            .forms-link a {
                color: #4CAF50;
                text-decoration: none;
                font-weight: bold;
            }
            .forms-link a:hover {
                text-decoration: underline;
            }
            .status {
                font-size: 16px;
                margin: 10px 0;
                padding: 10px;
                border-radius: 5px;
            }
            .waiting {
                background: rgba(255, 193, 7, 0.3);
                border: 1px solid #FFC107;
            }
            .ready {
                background: rgba(76, 175, 80, 0.3);
                border: 1px solid #4CAF50;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üîç –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è</h1>
            <p>–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Chrome —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è "–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç–µ–ª—å —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–æ—Ä–º—ã"</p>
            
            <div class="timer">
                ‚è±Ô∏è –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: ${elapsedSeconds} —Å–µ–∫—É–Ω–¥
            </div>
    `;
    
    if (remainingSeconds > 0) {
        content += `
            <div class="status waiting">
                ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ä–º—É... (–æ—Å—Ç–∞–ª–æ—Å—å: ${remainingSeconds} —Å–µ–∫)
            </div>
            <p>–°—Å—ã–ª–∫–∞ –Ω–∞ Microsoft Forms –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ ${remainingSeconds} —Å–µ–∫—É–Ω–¥</p>
        `;
    } else {
        content += `
            <div class="status ready">
                ‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ä–º—É –≥–æ—Ç–æ–≤–∞!
            </div>
            <div class="forms-link">
                <p>üìù <strong>–°—Å—ã–ª–∫–∞ –Ω–∞ Microsoft Forms:</strong></p>
                <a href="${formsLink}" target="_blank">${formsLink}</a>
            </div>
            <p>–¢–µ–ø–µ—Ä—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ–±–Ω–∞—Ä—É–∂–∏—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É –∏ –æ—Ç–∫—Ä—ã—Ç—å –µ—ë –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ!</p>
        `;
    }
    
    content += `
        </div>
        
        <script>
            // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
            setTimeout(() => {
                location.reload();
            }, 5000);
        </script>
    </body>
    </html>
    `;
    
    return content;
}

// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
const server = http.createServer((req, res) => {
    const parsedUrl = url.parse(req.url, true);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    
    if (req.method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
    }
    
    // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if (parsedUrl.pathname === '/' || parsedUrl.pathname === '/index.html') {
        res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
        res.end(generateHTML());
    }
    // API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    else if (parsedUrl.pathname === '/api/status') {
        const currentTime = Date.now();
        const elapsedSeconds = Math.floor((currentTime - serverStartTime) / 1000);
        const hasFormsLink = elapsedSeconds >= 60;
        
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
            serverStartTime: serverStartTime,
            currentTime: currentTime,
            elapsedSeconds: elapsedSeconds,
            hasFormsLink: hasFormsLink,
            formsLink: hasFormsLink ? formsLink : null
        }));
    }
    // 404 –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    else {
        res.writeHead(404, { 'Content-Type': 'text/html; charset=utf-8' });
        res.end(`
            <h1>404 - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>
            <p>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:</p>
            <ul>
                <li><a href="/">–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</a></li>
                <li><a href="/api/status">API —Å—Ç–∞—Ç—É—Å–∞</a></li>
            </ul>
        `);
    }
});

const PORT = process.env.PORT || 3000;

server.listen(PORT, () => {
    console.log(`üöÄ –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
    console.log(`üìù –°—Å—ã–ª–∫–∞ –Ω–∞ Microsoft Forms –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥`);
    console.log(`üîó –°—Å—ã–ª–∫–∞: ${formsLink}`);
    console.log(`‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString()}`);
    console.log(`\n–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', () => {
    console.log('\nüëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('\nüëã –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
});
